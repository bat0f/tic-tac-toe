@page "/original"
@using Microsoft.AspNetCore.SignalR.Client

<h3>Крестики-нолики</h3>

@if (!connected)
{
    <p>Введите имя:</p>
    <input @bind="username" placeholder="Введите имя" />
    <select @bind="difficulty">
        <option value="easy">Лёгкий</option>
        <option value="medium">Средний</option>
        <option value="hard">Сложный</option>
    </select>
    <select @bind="lineLength">
        <option value="3">3x3</option>
        <option value="4">4x4</option>
        <option value="5">5x5</option>
    </select>
    <button @onclick="Connect">Присоединиться</button>
}
else if (isWaiting)
{
    <p>Ожидание второго игрока...</p>
}
else if (gameOverMessage != null)
{
    <p>@gameOverMessage</p>
    <button @onclick="ResetGame">Новая игра</button>
}
else
{
    <p>Вы играете за: @playerSymbol</p>
    <p>Ход игрока: @currentPlayer</p>
    <div style="display: grid; grid-template-columns: repeat(@boardSize, 100px); gap: 5px; width: @(boardSize * 105)px;">
        @for (int i = 0; i < boardSize; i++)
        {
            for (int j = 0; j < boardSize; j++)
            {
                var row = i;
                var col = j;
                <button style="width: 100px; height: 100px; font-size: 24px;"
                        disabled="@(currentPlayer != username || board[i][j] != '\0' || gameOverMessage != null)"
                        @onclick="() => MakeMove(row, col)">
                    @(board[i][j] == '\0' ? "" : board[i][j].ToString())
                </button>
            }
        }
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red;">@errorMessage</p>
}

@code {
    private HubConnection? hubConnection;
    private string username = "";
    private string difficulty = "easy";
    private int lineLength = 3;
    private bool connected = false;
    private bool isWaiting = false;
    private string? playerSymbol;
    private string? currentPlayer;
    private string? gameId;
    private string? player1;
    private string? player2;
    private char[][] board = new char[0][];
    private string? gameOverMessage;
    private string errorMessage = "";
    private int boardSize;

    private async Task Connect()
    {
        if (string.IsNullOrWhiteSpace(username))
        {
            username = $"Player_{Guid.NewGuid().ToString().Substring(0, 4)}";
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://26.171.188.146:5001/originalHub")
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On("WaitingForOpponent", () =>
        {
            Console.WriteLine("Received WaitingForOpponent");
            isWaiting = true;
            errorMessage = "";
            StateHasChanged();
        });

        hubConnection.On<string, string, string, Dictionary<string, char>>("GameStarted", (id, p1, p2, symbolMap) =>
        {
            Console.WriteLine($"Received GameStarted: {id}, {p1}, {p2}");
            isWaiting = false;
            gameId = id;
            player1 = p1;
            player2 = p2;
            playerSymbol = symbolMap[username].ToString();
            currentPlayer = p1;
            boardSize = lineLength == 3 ? 6 : lineLength == 4 ? 8 : 10;
            board = CreateEmptyBoard(boardSize);
            gameOverMessage = null;
            errorMessage = "";
            StateHasChanged();
        });

        hubConnection.On<char[][], string>("UpdateState", (newBoard, newCurrentPlayer) =>
        {
            Console.WriteLine("Received UpdateState");
            board = newBoard;
            currentPlayer = newCurrentPlayer;
            StateHasChanged();
        });

        hubConnection.On<string, int, int, char>("MoveMade", (player, row, col, symbol) =>
        {
            Console.WriteLine($"Received MoveMade: {player}, {row}, {col}, {symbol}");
            if (board.Length > 0 && row >= 0 && row < board.Length && col >= 0 && col < board[row].Length)
            {
                board[row][col] = symbol;
                StateHasChanged();
            }
        });

        hubConnection.On<string, string>("GameOver", (winner, result) =>
        {
            Console.WriteLine($"Received GameOver: {winner}, {result}");
            gameOverMessage = result == "win" ? $"Победил {winner}!" : "Ничья!";
            StateHasChanged();
        });

        hubConnection.On<string>("GameReset", (id) =>
        {
            Console.WriteLine($"Received GameReset: {id}");
            if (gameId == id)
            {
                gameId = null;
                playerSymbol = null;
                currentPlayer = null;
                board = new char[0][];
                gameOverMessage = null;
                errorMessage = "";
                isWaiting = false;
                StateHasChanged();
            }
        });

        try
        {
            Console.WriteLine("Starting connection...");
            await hubConnection.StartAsync();
            Console.WriteLine("Connection started");
            connected = true;
            Console.WriteLine($"Joining game with {username}, {difficulty}, {lineLength}");
            await hubConnection.SendAsync("JoinGame", username, difficulty, lineLength);
            Console.WriteLine("Sent JoinGame request");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Connection failed: {ex.Message}");
            errorMessage = $"Ошибка подключения: {ex.Message}";
            connected = false;
            StateHasChanged();
        }
    }

    private async Task MakeMove(int row, int col)
    {
        if (hubConnection == null || gameId == null) return;
        try
        {
            Console.WriteLine($"Making move: {row}, {col}");
            await hubConnection.SendAsync("MakeMove", gameId, username, row, col);
            Console.WriteLine("Sent MakeMove request");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"MakeMove failed: {ex.Message}");
            errorMessage = $"Ошибка хода: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task ResetGame()
    {
        if (hubConnection != null && !string.IsNullOrEmpty(username))
        {
            Console.WriteLine("Resetting game...");
            await Connect(); // Переподключение для новой игры
        }
    }

    private char[][] CreateEmptyBoard(int size)
    {
        var newBoard = new char[size][];
        for (int i = 0; i < size; i++)
        {
            newBoard[i] = new char[size];
        }
        return newBoard;
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            Console.WriteLine("Disposing connection...");
            await hubConnection.DisposeAsync();
        }
    }
}