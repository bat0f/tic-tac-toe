@page "/register"
@using System.Net.Http.Json
@using tic_tac_toe_ui.Models
@using tic_tac_toe_ui.Layout
@using MudBlazor
@inject HttpClient Http
@inject NavigationManager Navigation
@layout MinimalLayout

<div class="register-container">
    <MudPaper Elevation="10" Class="register-card pa-6 animate-card">
        <MudGrid>
            <MudItem xs="12" Class="d-flex justify-center">
                <MudImage Src="images/logo.png" Alt="Логотип игры" Width="100" Height="100" Class="mb-4 logo-animation" />
            </MudItem>
            <MudItem xs="12">
                <MudText Typo="Typo.h4" Align="Align.Center" GutterBottom="true">Регистрация</MudText>
            </MudItem>
            <MudItem xs="12" Class="mt-4">
                <MudForm @ref="form" @bind-IsValid="@isValid">
                    <MudTextField @bind-Value="model.Username"
                                  Label="Имя пользователя"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  Required="true"
                                  RequiredError="Введите имя пользователя"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Person"
                                  Class="mb-4 animate-input" />
                    <MudTextField @bind-Value="model.Email"
                                  Label="Email"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  InputType="InputType.Email"
                                  Required="true"
                                  RequiredError="Введите email"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Email"
                                  Class="mb-4 animate-input" />
                    <MudTextField @bind-Value="model.Password"
                                  Label="Пароль"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  InputType="InputType.Password"
                                  Required="true"
                                  RequiredError="Введите пароль"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Lock"
                                  Class="mb-4 animate-input" />
                    <MudTextField @bind-Value="model.ConfirmPassword"
                                  Label="Подтверждение пароля"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  InputType="InputType.Password"
                                  Required="true"
                                  RequiredError="Подтвердите пароль"
                                  Validation="@(new Func<string, string>(ValidateConfirmPassword))"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Lock"
                                  Class="mb-4 animate-input" />
                </MudForm>
            </MudItem>
            <MudItem xs="12">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           OnClick="RegisterUser"
                           Disabled="@(!isValid || isLoading)"
                           FullWidth="true"
                           Class="register-button">
                    @if (isLoading)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                        <span>Регистрация...</span>
                    }
                    else
                    {
                        <span>Зарегистрироваться</span>
                    }
                </MudButton>
            </MudItem>
            <MudItem xs="12" Class="mt-2 d-flex justify-center">
                <MudText Typo="Typo.body2">
                    Уже есть аккаунт? <MudLink Href="/login" Color="Color.Primary">Войти</MudLink>
                </MudText>
            </MudItem>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudItem xs="12" Class="mt-2">
                    <MudAlert Severity="Severity.Error" Class="animate-error">@errorMessage</MudAlert>
                </MudItem>
            }
        </MudGrid>
    </MudPaper>
</div>

<style>
    .register-container {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        padding: 20px;
        box-sizing: border-box;
        overflow: hidden;
    }

    .register-card {
        max-width: 400px;
        width: 100%;
        background: white;
        border-radius: 16px;
        animation: slideIn 0.5s ease-out;
    }

    .logo-animation {
        animation: pulse 2s infinite;
    }

    .animate-input {
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .animate-input:focus-within {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

    .register-button {
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

        .register-button:hover:not([disabled]) {
            transform: scale(1.05);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }

        .register-button:active:not([disabled]) {
            transform: scale(0.95);
        }

    .animate-error {
        animation: shake 0.5s ease;
    }

    @@keyframes slideIn {
        0% {
            opacity: 0;
            transform: translateY(-20px);
        }

        100% {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes pulse {
        0% {
            transform: scale(1);
        }

        50% {
            transform: scale(1.1);
        }

        100% {
            transform: scale(1);
        }
    }

    @@keyframes shake {
        0%, 100% {
            transform: translateX(0);
        }

        25% {
            transform: translateX(-5px);
        }

        75% {
            transform: translateX(5px);
        }
    }

    @@media (max-width: 500px) {
        .register-card {
            padding: 16px !important;
        }
    }
</style>

@code {
    private RegisterRequest model = new RegisterRequest();
    private string errorMessage = "";
    private bool isValid;
    private bool isLoading;
    private MudForm? form;

    private class RegisterRequest
    {
        public string Username { get; set; }
        public string? Email { get; set; }
        public string Password { get; set; }
        public string ConfirmPassword { get; set; }
    }

    private class ErrorResponse
    {
        public string Message { get; set; }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            form?.Validate();
        }
    }

    private string ValidateConfirmPassword(string confirmPassword)
    {
        if (confirmPassword != model.Password)
        {
            return "Пароли не совпадают.";
        }
        return null;
    }

    private async Task RegisterUser()
    {
        if (!isValid) return;

        errorMessage = "";
        isLoading = true;
        StateHasChanged();

        try
        {
            // Отправляем Username, Email и Password
            var request = new
            {
                Username = model.Username,
                Email = model.Email,
                Password = model.Password
            };
            var response = await Http.PostAsJsonAsync("api/auth/register", request);
            if (response.IsSuccessStatusCode)
            {
                errorMessage = "";
                Navigation.NavigateTo("/login");
            }
            else
            {
                var errorResponse = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                errorMessage = errorResponse?.Message ?? "Ошибка регистрации.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}