@page "/game"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Timers
@using System.Globalization

<h3>Крестики-нолики с задачами</h3>

@if (!connected)
{
    <p>Введите имя:</p>
    <input @bind="username" placeholder="Введите имя" />
    <select @bind="difficulty">
        <option value="easy">Лёгкий</option>
        <option value="medium">Средний</option>
        <option value="hard">Сложный</option>
    </select>
    <select @bind="lineLength">
        <option value="3">3x3</option>
        <option value="4">4x4</option>
        <option value="5">5x5</option>
    </select>
    <button @onclick="Connect">Присоединиться</button>
}
else if (isWaiting)
{
    <p>Ожидание второго игрока...</p>
}
else if (gameOverMessage != null)
{
    <p>@gameOverMessage</p>
    <div style="position: relative; width: @(boardSize * 105)px; height: @(boardSize * 105)px;">
        <div style="display: grid; grid-template-columns: repeat(@boardSize, 100px); gap: 5px; width: @(boardSize * 105)px;">
            @for (int i = 0; i < boardSize; i++)
            {
                for (int j = 0; j < boardSize; j++)
                {
                    var row = i;
                    var col = j;
                    <button style="width: 100px; height: 100px; font-size: 24px;" disabled="true">
                        @(board[i][j] == '\0' ? "" : board[i][j].ToString())
                    </button>
                }
            }
        </div>
        @if (winLineType != null && (startX != endX || startY != endY))
        {
            <svg style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;">
                <line x1="@((startY * 105 + 52.5).ToString("F1", CultureInfo.InvariantCulture))"
                      y1="@((startX * 105 + 52.5).ToString("F1", CultureInfo.InvariantCulture))"
                      x2="@((endY * 105 + 52.5).ToString("F1", CultureInfo.InvariantCulture))"
                      y2="@((endX * 105 + 52.5).ToString("F1", CultureInfo.InvariantCulture))"
                      stroke="red" stroke-width="5" stroke-linecap="round" />
            </svg>
        }
        else
        {
            <p>Отладка: winLineType=@winLineType, startX=@startX, startY=@startY, endX=@endX, endY=@endY</p>
        }
    </div>
    <button @onclick="ResetGame">Реванш</button>
    <button @onclick="ReturnToMainMenu">Вернуться в главное меню</button>
}
else
{
    <p>Вы играете за: @playerSymbol</p>
    <p>Ход игрока: @currentPlayer (Осталось: @timerSeconds с)</p>
    <p>Осталось до конца сессии: @((sessionTimerSeconds / 60)) мин @((sessionTimerSeconds % 60)) с</p>
    @if (!string.IsNullOrEmpty(feedback))
    {
        <p id="feedback" style="color: @(feedback.Contains("Правильно") ? "green" : "red");">@feedback</p>
    }
    @if (!string.IsNullOrEmpty(task) && selectedRow >= 0 && selectedCol >= 0 && currentPlayer == username)
    {
        <div>
            <p>Задача: @task</p>
            <input @bind="answer" placeholder="Введите ответ" />
            <button @onclick="SubmitAnswer">Отправить</button>
        </div>
    }
    <div style="display: grid; grid-template-columns: repeat(@boardSize, 100px); gap: 5px; width: @(boardSize * 105)px;">
        @for (int i = 0; i < boardSize; i++)
        {
            for (int j = 0; j < boardSize; j++)
            {
                var row = i;
                var col = j;
                <button style="width: 100px; height: 100px; font-size: 24px;"
                        disabled="@(currentPlayer != username || board[i][j] != '\0' || gameOverMessage != null || (!string.IsNullOrEmpty(task) && (selectedRow >= 0 || selectedCol >= 0)))"
                        @onclick="() => MakeMove(row, col)">
                    @(board[i][j] == '\0' ? "" : board[i][j].ToString())
                </button>
            }
        }
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red;">@errorMessage</p>
}

@code {
    private HubConnection? hubConnection;
    private string username = "";
    private string difficulty = "easy";
    private int lineLength = 3;
    private bool connected = false;
    private bool isWaiting = false;
    private string? playerSymbol;
    private string? currentPlayer;
    private string? gameId;
    private string? player1;
    private string? player2;
    private char[][] board = new char[0][];
    private string? gameOverMessage;
    private string errorMessage = "";
    private int boardSize;
    private Timer? timer;
    private int timerSeconds = 8;
    private Timer? sessionTimer;
    private int sessionTimerSeconds = 15 * 60;
    private string task = "";
    private string answer = "";
    private int selectedRow = -1;
    private int selectedCol = -1;
    private string feedback = "";
    private bool isTaskPhase = false;
    private string? winLineType;
    private int startX, startY, endX, endY;

    private async Task Connect()
    {
        if (string.IsNullOrWhiteSpace(username))
        {
            username = $"Player_{Guid.NewGuid().ToString().Substring(0, 4)}";
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://26.171.188.146:5001/gameHub")
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On("WaitingForOpponent", () =>
        {
            Console.WriteLine("Received WaitingForOpponent");
            isWaiting = true;
            errorMessage = "";
            StateHasChanged();
        });

        hubConnection.On<string, string, string, Dictionary<string, char>>("GameStarted", (id, p1, p2, symbolMap) =>
        {
            Console.WriteLine($"Received GameStarted: {id}, {p1}, {p2}");
            isWaiting = false;
            gameId = id;
            player1 = p1;
            player2 = p2;
            playerSymbol = symbolMap[username].ToString();
            currentPlayer = p1;
            boardSize = lineLength == 3 ? 6 : lineLength == 4 ? 8 : 10;
            board = CreateEmptyBoard(boardSize);
            StartTimer();
            StartSessionTimer();
            gameOverMessage = null;
            winLineType = null;
            errorMessage = "";
            StateHasChanged();
        });

        hubConnection.On<char[][], string, int, string>("UpdateState", (newBoard, newCurrentPlayer, remainingTime, newTask) =>
        {
            Console.WriteLine($"Received UpdateState: Board={newBoard.Length}, CurrentPlayer={newCurrentPlayer}, Time={remainingTime}, Task={newTask}, Username={username}");
            board = newBoard;
            currentPlayer = newCurrentPlayer;
            timerSeconds = remainingTime;
            task = newTask;
            isTaskPhase = !string.IsNullOrEmpty(newTask);
            if (!isTaskPhase)
            {
                selectedRow = -1;
                selectedCol = -1;
            }
            Console.WriteLine($"After UpdateState: CurrentPlayer={currentPlayer}, IsTaskPhase={isTaskPhase}, SelectedRow={selectedRow}, SelectedCol={selectedCol}");
            StartTimer();
            StateHasChanged();
        });

        hubConnection.On<string, int, int, char>("MoveMade", (player, row, col, symbol) =>
        {
            Console.WriteLine($"Received MoveMade: {player}, {row}, {col}, {symbol}, Username={username}");
            if (board.Length > 0 && row >= 0 && row < board.Length && col >= 0 && col < board[row].Length)
            {
                board[row][col] = symbol;
                selectedRow = -1;
                selectedCol = -1;
                task = "";
                isTaskPhase = false;
                Console.WriteLine($"After MoveMade: IsTaskPhase={isTaskPhase}, SelectedRow={selectedRow}, SelectedCol={selectedCol}");
                StateHasChanged();
            }
        });

        hubConnection.On<string, string, string, int, int, int, int>("GameOver", (winner, result, lineType, sX, sY, eX, eY) =>
        {
            Console.WriteLine($"Received GameOver: winner={winner}, result={result}, lineType={lineType}, start=({sX},{sY}), end=({eX},{eY})");
            StopTimer();
            StopSessionTimer();
            gameOverMessage = result == "win" ? $"Победил {winner}!" : "Ничья!";
            if (result == "win" && lineType != null && (sX != eX || sY != eY))
            {
                winLineType = lineType;
                startX = sX;
                startY = sY;
                endX = eX;
                endY = eY;
                Console.WriteLine($"Линия установлена: {winLineType}, от ({startX},{startY}) до ({endX},{endY})");
            }
            else
            {
                winLineType = null;
                Console.WriteLine("Линия не установлена: либо ничья, либо некорректные координаты.");
            }
            task = "";
            feedback = "";
            selectedRow = -1;
            selectedCol = -1;
            isTaskPhase = false;
            StateHasChanged();
        });

        hubConnection.On<string, char[][], string>("GameReset", (id, newBoard, newCurrentPlayer) =>
        {
            Console.WriteLine($"Received GameReset: {id}");
            if (gameId == id)
            {
                board = newBoard;
                currentPlayer = newCurrentPlayer;
                gameOverMessage = null;
                winLineType = null;
                errorMessage = "";
                task = "";
                feedback = "";
                selectedRow = -1;
                selectedCol = -1;
                isTaskPhase = false;
                sessionTimerSeconds = 15 * 60; // Сбрасываем локальный таймер
                StartSessionTimer();
                StartTimer();
                StateHasChanged();
            }
        });

        hubConnection.On<string>("TaskFeedback", (message) =>
        {
            Console.WriteLine($"Received TaskFeedback: {message}");
            feedback = message;
            StateHasChanged();
            _ = Task.Delay(2000).ContinueWith(_ => { feedback = ""; StateHasChanged(); });
        });

        try
        {
            Console.WriteLine("Starting connection...");
            await hubConnection.StartAsync();
            Console.WriteLine("Connection started");
            connected = true;
            Console.WriteLine($"Joining game with {username}, {difficulty}, {lineLength}");
            await hubConnection.SendAsync("JoinGame", username, difficulty, lineLength);
            Console.WriteLine("Sent JoinGame request");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Connection failed: {ex.Message}");
            errorMessage = $"Ошибка подключения: {ex.Message}";
            connected = false;
            StateHasChanged();
        }
    }

    private async Task MakeMove(int row, int col)
    {
        if (hubConnection == null || gameId == null || (currentPlayer != username && !string.IsNullOrEmpty(task))) return;
        try
        {
            Console.WriteLine($"Making move: {row}, {col}, Username={username}, CurrentPlayer={currentPlayer}, Task={task}");
            selectedRow = row;
            selectedCol = col;
            await hubConnection.SendAsync("MakeMove", gameId, username, row, col);
            Console.WriteLine("Sent MakeMove request");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"MakeMove failed: {ex.Message}");
            errorMessage = $"Ошибка хода: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task SubmitAnswer()
    {
        if (hubConnection == null || gameId == null || string.IsNullOrEmpty(task) || selectedRow < 0 || selectedCol < 0) return;
        try
        {
            Console.WriteLine($"Submitting answer: {answer}, Username={username}");
            await hubConnection.SendAsync("SubmitAnswer", gameId, username, answer);
            answer = "";
            Console.WriteLine("Sent SubmitAnswer request");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SubmitAnswer failed: {ex.Message}");
            errorMessage = $"Ошибка отправки ответа: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task ResetGame()
    {
        if (hubConnection == null) return;

        Console.WriteLine("ResetGame called: Starting reset process...");
        try
        {
            // Сохраняем параметры текущей игры
            var currentUsername = username;
            var currentDifficulty = difficulty;
            var currentLineLength = lineLength;

            // Останавливаем текущие таймеры и очищаем состояние
            StopTimer();
            StopSessionTimer();
            gameOverMessage = null;
            winLineType = null;
            errorMessage = "";
            task = "";
            feedback = "";
            selectedRow = -1;
            selectedCol = -1;
            isTaskPhase = false;
            board = new char[0][];
            sessionTimerSeconds = 15 * 60;

            // Переподключаемся, как при новой игре
            await hubConnection.StopAsync();
            hubConnection = null;
            connected = false;
            isWaiting = false;

            // Восстанавливаем параметры и подключаемся заново
            username = currentUsername;
            difficulty = currentDifficulty;
            lineLength = currentLineLength;
            await Connect();

            Console.WriteLine("ResetGame completed: Game restarted.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"ResetGame failed: {ex.Message}");
            errorMessage = $"Ошибка при реванше: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task ReturnToMainMenu()
    {
        if (hubConnection != null)
        {
            Console.WriteLine("Returning to main menu...");
            StopTimer();
            StopSessionTimer();
            await hubConnection.StopAsync();
            hubConnection = null;
            connected = false;
            isWaiting = false;
            gameId = null;
            playerSymbol = null;
            currentPlayer = null;
            player1 = null;
            player2 = null;
            board = new char[0][];
            gameOverMessage = null;
            winLineType = null;
            errorMessage = "";
            task = "";
            feedback = "";
            selectedRow = -1;
            selectedCol = -1;
            isTaskPhase = false;
            sessionTimerSeconds = 15 * 60;
            StateHasChanged();
        }
    }

    private void StartTimer()
    {
        StopTimer();
        timer = new Timer(1000);
        timer.Elapsed += (s, e) =>
        {
            timerSeconds--;
            if (timerSeconds <= 0)
            {
                StopTimer();
                if (hubConnection != null && gameId != null && currentPlayer == username)
                {
                    if (isTaskPhase)
                    {
                        _ = Task.Run(async () => await hubConnection.SendAsync("PassTurn", gameId, username));
                    }
                    else
                    {
                        _ = Task.Run(async () => await hubConnection.SendAsync("PassTurn", gameId, username));
                    }
                }
            }
            InvokeAsync(StateHasChanged);
        };
        timerSeconds = isTaskPhase ? 15 : 8;
        timer.Start();
    }

    private void StopTimer()
    {
        timer?.Stop();
        timer?.Dispose();
        timer = null;
        InvokeAsync(StateHasChanged);
    }

    private void StartSessionTimer()
    {
        StopSessionTimer();
        sessionTimer = new Timer(1000);
        sessionTimer.Elapsed += (s, e) =>
        {
            sessionTimerSeconds--;
            if (sessionTimerSeconds <= 0)
            {
                StopSessionTimer();
                if (hubConnection != null && gameId != null)
                {
                    _ = Task.Run(async () => await hubConnection.SendAsync("PassTurn", gameId, username));
                }
            }
            InvokeAsync(StateHasChanged);
        };
        sessionTimer.Start();
    }

    private void StopSessionTimer()
    {
        sessionTimer?.Stop();
        sessionTimer?.Dispose();
        sessionTimer = null;
        InvokeAsync(StateHasChanged);
    }

    private char[][] CreateEmptyBoard(int size)
    {
        var newBoard = new char[size][];
        for (int i = 0; i < size; i++)
        {
            newBoard[i] = new char[size];
        }
        return newBoard;
    }

    public async ValueTask DisposeAsync()
    {
        StopTimer();
        StopSessionTimer();
        if (hubConnection is not null)
        {
            Console.WriteLine("Disposing connection...");
            await hubConnection.DisposeAsync();
        }
    }
}