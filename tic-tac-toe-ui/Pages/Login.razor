@page "/login"
@using System.Net.Http.Json
@using tic_tac_toe_ui.Models
@using MudBlazor
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@layout MinimalLayout

<div class="login-container">
    <MudPaper Elevation="10" Class="login-card pa-6 animate-card">
        <MudGrid>
            <MudItem xs="12" Class="d-flex justify-center">
                <MudImage Src="icon.png" Alt="Логотип игры" Width="100" Height="100" Class="mb-4 logo-animation" />
            </MudItem>
            <MudItem xs="12">
                <MudText Typo="Typo.h4" Align="Align.Center" GutterBottom="true">Вход в игру</MudText>
            </MudItem>
            <MudItem xs="12" Class="mt-4">
                <MudForm @ref="form" @bind-IsValid="@isValid">
                    <MudTextField @bind-Value="username"
                                  Label="Имя пользователя"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  Required="true"
                                  RequiredError="Введите имя пользователя"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Person"
                                  Class="mb-4 animate-input" />
                    <MudTextField @bind-Value="password"
                                  Label="Пароль"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  InputType="InputType.Password"
                                  Required="true"
                                  RequiredError="Введите пароль"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Lock"
                                  Class="mb-4 animate-input" />
                </MudForm>
            </MudItem>
            <MudItem xs="12">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           OnClick="LoginUser"
                           Disabled="@(!isValid || isLoading)"
                           FullWidth="true"
                           Class="login-button">
                    @if (isLoading)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                        <span>Вход...</span>
                    }
                    else
                    {
                        <span>Войти</span>
                    }
                </MudButton>
            </MudItem>
            <MudItem xs="12" Class="mt-2 d-flex justify-center">
                <MudText Typo="Typo.body2">
                    Нет аккаунта? <MudLink Href="/register" Color="Color.Primary">Зарегистрироваться</MudLink>
                </MudText>
            </MudItem>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudItem xs="12" Class="mt-2">
                    <MudAlert Severity="Severity.Error" Class="animate-error">@errorMessage</MudAlert>
                </MudItem>
            }
        </MudGrid>
    </MudPaper>
</div>

<style>
    .login-container {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        padding: 20px;
        box-sizing: border-box;
        overflow: hidden;
    }

    .login-card {
        max-width: 400px;
        width: 100%;
        background: white;
        border-radius: 16px;
        animation: slideIn 0.5s ease-out;
    }

    .logo-animation {
        animation: pulse 2s infinite;
    }

    .animate-input {
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .animate-input:focus-within {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

    .login-button {
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

        .login-button:hover:not([disabled]) {
            transform: scale(1.05);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }

        .login-button:active:not([disabled]) {
            transform: scale(0.95);
        }

    .animate-error {
        animation: shake 0.5s ease;
    }

    @@keyframes slideIn {
        0% {
            opacity: 0;
            transform: translateY(-20px);
        }

        100% {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes pulse {
        0% {
            transform: scale(1);
        }

        50% {
            transform: scale(1.1);
        }

        100% {
            transform: scale(1);
        }
    }

    @@keyframes shake {
        0%, 100% {
            transform: translateX(0);
        }

        25% {
            transform: translateX(-5px);
        }

        75% {
            transform: translateX(5px);
        }
    }

    @@media (max-width: 500px) {
        .login-card {
            padding: 16px !important;
        }
    }
</style>

@code {
    private string? username;
    private string? password;
    private string errorMessage = "";
    private bool isValid;
    private bool isLoading;
    private MudForm? form;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            form?.Validate();
            await CheckRefreshToken();
        }
    }

    private async Task CheckRefreshToken()
    {
        var refreshToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "refreshToken");
        var accessToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "accessToken");
        if (!string.IsNullOrEmpty(refreshToken) && !string.IsNullOrEmpty(accessToken))
        {
            isLoading = true;
            StateHasChanged();

            try
            {
                var response = await Http.PostAsJsonAsync("api/auth/refresh", new { AccessToken = accessToken, RefreshToken = refreshToken });

                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<RefreshTokenResponse>();
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "accessToken", result.AccessToken);
                    if (!string.IsNullOrEmpty(result.RefreshToken))
                    {
                        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "refreshToken", result.RefreshToken);
                    }
                    Navigation.NavigateTo("/game");
                }
                else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
                {
                    // Очищаем refresh-токен при ошибке 400, не показываем сообщение
                    await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "refreshToken");
                    await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "accessToken");
                }
            }
            catch (Exception ex)
            {
                // Логируем ошибку, но не показываем пользователю
                Console.WriteLine($"Ошибка обновления токена: {ex.Message}");
                await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "refreshToken");
                await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "accessToken");
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    private async Task LoginUser()
    {
        if (!isValid) return;

        errorMessage = "";
        isLoading = true;
        StateHasChanged();

        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/login", new LoginRequest
                {
                    Username = username,
                    Password = password
                });

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "accessToken", result.AccessToken);
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "refreshToken", result.RefreshToken);
                Navigation.NavigateTo("/game");
            }
            else
            {
                errorMessage = "Ошибка входа: " + await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}